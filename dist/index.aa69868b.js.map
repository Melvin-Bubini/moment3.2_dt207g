{"mappings":"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","sources":["src/js/main.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet url = \"http://127.0.0.1:3001/jobs\";\r\n\r\nlet cvArticle = document.getElementById('cvArticle')\r\n\r\n// Lägg till en referens till felmeddelande-spanet\r\nconst errorSpan = document.getElementById('errorSpan');\r\n\r\ngetData(); // Hämta datan när sidan laddas\r\n\r\n\r\nasync function getData() {\r\n    try {\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n\r\n        if (data.length > 0) {\r\n            cvArticle.style.display = \"block\";\r\n            displayCvData(data); // Visa datan när den har hämtats\r\n        } else {\r\n            cvArticle.style.display = \"none\"; // Dölj cvArticle om det inte finns någon data\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n    }\r\n}\r\n\r\nasync function createCv(companyname, jobtitle, location) {\r\n    try {\r\n        // Validera inputfälten\r\n        if (!companyname || !jobtitle || !location) {\r\n            errorSpan.textContent = \"Alla fält är obligatoriska.\";\r\n            return;\r\n        }\r\n\r\n        // Ta bort eventuellt tidigare felmeddelande\r\n        errorSpan.textContent = \"\";\r\n\r\n        const response = await fetch(url, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({ companyname, jobtitle, location })\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log(data);\r\n        getData(); // Uppdatera datan på skärmen efter tillägg\r\n    } catch (error) {\r\n        console.error(\"Error creating CV:\", error);\r\n    }\r\n}\r\n\r\nasync function editCv(cvId, currentData) {\r\n    // Skapa ett redigeringsformulär\r\n    const form = document.createElement(\"form\");\r\n\r\n    const companynameInput = document.createElement(\"input\");\r\n    companynameInput.type = \"text\";\r\n    companynameInput.value = currentData.companyname;\r\n\r\n    const jobtitleInput = document.createElement(\"input\");\r\n    jobtitleInput.type = \"text\";\r\n    jobtitleInput.value = currentData.jobtitle;\r\n\r\n    const locationInput = document.createElement(\"input\");\r\n    locationInput.type = \"text\";\r\n    locationInput.value = currentData.location;\r\n\r\n    const updateButton = document.createElement(\"button\");\r\n    updateButton.textContent = \"Uppdatera\";\r\n\r\n    // Lyssna på uppdateringsknappen\r\n    updateButton.addEventListener(\"click\", async (event) => {\r\n        event.preventDefault();\r\n\r\n        const updatedData = {\r\n            companyname: companynameInput.value,\r\n            jobtitle: jobtitleInput.value,\r\n            location: locationInput.value\r\n        };\r\n\r\n        await updateCvData(cvId, updatedData);\r\n    });\r\n\r\n    form.appendChild(companynameInput);\r\n    form.appendChild(jobtitleInput);\r\n    form.appendChild(locationInput);\r\n    form.appendChild(updateButton);\r\n\r\n    cvArticle.innerHTML = \"\"; // Rensa CV-artikeln\r\n    cvArticle.appendChild(form);\r\n}\r\n\r\nasync function updateCvData(cvId, updates) {\r\n    try {\r\n        const response = await fetch(`${url}/${cvId}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(updates)\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log(data);\r\n        getData(); // Uppdatera datan på skärmen efter uppdatering\r\n    } catch (error) {\r\n        console.error(\"Error updating CV:\", error);\r\n    }\r\n}\r\n\r\nfunction displayCvData(cvData) {\r\n    cvArticle.innerHTML = \"\"; // Rensa tidigare data\r\n\r\n    cvData.forEach(cv => {\r\n        let cvElement = document.createElement(\"div\");\r\n        cvElement.classList.add(\"cv\");\r\n\r\n        let companyNameElement = document.createElement(\"h2\");\r\n        companyNameElement.textContent = cv.companyname;\r\n\r\n        let jobTitleElement = document.createElement(\"p\");\r\n        jobTitleElement.textContent = \"Jobbtitel: \" + cv.jobtitle;\r\n\r\n        let locationElement = document.createElement(\"p\");\r\n        locationElement.textContent = \"Plats: \" + cv.location;\r\n\r\n        let editButton = document.createElement(\"button\");\r\n        editButton.textContent = \"Uppdatera\";\r\n        editButton.classList.add(\"edit-button\"); // Lägg till klassen för redigeringsknappen\r\n        editButton.addEventListener(\"click\", async () => {\r\n            await editCv(cv._id, cv); // Anropa funktionen för att redigera CV-informationen\r\n        });\r\n\r\n        let deleteButton = document.createElement(\"button\");\r\n        deleteButton.textContent = \"Ta bort\";\r\n        deleteButton.classList.add(\"delete-button\"); // Lägg till klassen för borttagn\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        deleteButton.addEventListener(\"click\", async () => {\r\n            await deleteCv(cv._id); // Anropa funktionen för att ta bort CV-informationen\r\n        });\r\n\r\n        cvElement.appendChild(companyNameElement);\r\n        cvElement.appendChild(jobTitleElement);\r\n        cvElement.appendChild(locationElement);\r\n        cvElement.appendChild(deleteButton); // Lägg till knappen för att ta bort\r\n        cvElement.appendChild(editButton); // Lägg till knappen för att redigera\r\n\r\n        cvArticle.appendChild(cvElement);\r\n    });\r\n}\r\n\r\nasync function deleteCv(cvId) {\r\n    try {\r\n        const response = await fetch(`${url}/${cvId}`, {\r\n            method: \"DELETE\"\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\"Kunde inte ta bort CV från servern.\");\r\n        }\r\n\r\n        getData(); // Uppdatera datan på skärmen efter borttagning\r\n    } catch (error) {\r\n        console.error(\"Ett fel uppstod vid borttagning av CV:\", error);\r\n    }\r\n}\r\n\r\ndocument.getElementById('cvForm').addEventListener('submit', function (event) {\r\n    event.preventDefault(); // Förhindra standardformulärinsändning\r\n\r\n    let companyname = document.getElementById('companynameInput').value;\r\n    let jobtitle = document.getElementById('jobtitleInput').value;\r\n    let location = document.getElementById('locationInput').value;\r\n\r\n    createCv(companyname, jobtitle, location);\r\n\r\n    // Rensa inputfälten efter att CV-informationen har skickats\r\n    document.getElementById('companynameInput').value = \"\";\r\n    document.getElementById('jobtitleInput').value = \"\";\r\n    document.getElementById('locationInput').value = \"\";\r\n});\r\n"],"names":[],"version":3,"file":"index.aa69868b.js.map","sourceRoot":"/__parcel_source_root/"}